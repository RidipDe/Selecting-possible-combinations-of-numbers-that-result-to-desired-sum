using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ConsoleApplication9
{
    class Program
    {
        static int TargetSum;
        static int[] InputData;

        static void Main()
        {
            Console.WriteLine("Enter no of terms");
            string str = Console.ReadLine();
            int no = Convert.ToInt32(str);
            InputData = new int[no];
            Console.WriteLine("Enter terms");
            for (int i = 0; i < no; i++)
            {
                str = Console.ReadLine();

                InputData[i] = Convert.ToInt32(str);

            }
            Console.WriteLine("Enter required term");
            str = Console.ReadLine();
            int TargetSum = Convert.ToInt32(str);


            // find all permutations
            var permutations = Permute(InputData);

            // check each permutation for the sum
            foreach (var item in permutations)
            {

                if (item.Sum() == TargetSum)
                {

                    Console.Write(string.Join(" + ", item.Select(n => n.ToString()).ToArray()));
                    Console.Write(" = " + TargetSum.ToString());
                    Console.WriteLine();

                }
            }

            Console.ReadKey();
        }

        static IEnumerable<int[]> Permute(int[] data) { return Permute(data, 0); }

        static IEnumerable<int[]> Permute(int[] data, int level)
        {
            // reached the edge yet? backtrack one step if so.
            if (level >= data.Length) yield break;

            // yield the first #level elements
            yield return data.Take(level + 1).ToArray();

            // permute the remaining elements
            for (int i = level + 1; i < data.Length; i++)
            {
                var temp = data[level];
                data[level] = data[i];
                data[i] = temp;

                foreach (var item in Permute(data, level + 1))
                    yield return item;

                temp = data[i];
                data[i] = data[level];
                data[level] = temp;
            }

        }
    }
}